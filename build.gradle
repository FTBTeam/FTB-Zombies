buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			name = "Modmuss50"
			url = "http://maven.modmuss50.me/"
		}
		maven {
			name = 'mojang'
			url = 'https://libraries.minecraft.net/'
		}
		maven {
			name = "CB Repo"
			url = "http://chickenbones.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'net.covers1624:GradleStuff:1.0-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'net.covers1624.repacked-deps'

sourceCompatibility = 1.8
targetCompatibility = 1.8


version = "1.12.2-2.1.0"

def ENV = System.getenv()
if (ENV.BUILD_NUMBER) {
	version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

minecraft {
	version = "1.12.2-14.23.4.2759"
	mappings = "snapshot_20171003"
	replace "@MODVERSION@", project.version
	useDepAts = true
	runDir = "run"
}

group = 'FTB-Zombies'

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version


	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}

	rename '(.+_at.cfg)', 'META-INF/$1'

}

repackedDeps {
	configuration = "shade"
	tasks = "jar"
}

configurations {
	shade
	compile.extendsFrom shade
}

repositories {
	maven {
		name = "Modmuss50"
		url = "http://maven.modmuss50.me/"
	}
}

dependencies {
	deobfCompile('RebornCore:RebornCore-1.12.2:+:universal') {
		transitive = false
	}
	deobfCompile('TechReborn:TechReborn-1.12.2:+:universal') {
		transitive = false
	}
	shade 'org.javassist:javassist:3.23.1-GA'
	shade 'me.modmuss50:Fusion-Legacy:+'
}

jar {
	classifier = 'universal'
	manifest {
		attributes 'FMLCorePlugin': 'me.modmuss50.ftb.zombies.FTBZombiesCore'
		attributes 'FMLCorePluginContainsFMLMod': 'true'
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	if (project.hasProperty('keyStore')) {
		keyStore = project.keyStore
		alias = project.keyStoreAlias
		storePass = project.keyStorePass
		keyPass = project.keyStoreKeyPass
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}

}

build.dependsOn signJar

import groovy.util.XmlSlurper
import org.apache.commons.io.FileUtils

task curseTools {
	doLast {
		def cacheFiles = new File(".gradle/curseTools")
		if (!cacheFiles.exists()) {
			cacheFiles.mkdirs()
		}

		def mavenMetadata = new File(cacheFiles, "maven-metadata.xml")

		logger.lifecycle(":downloading curseTools metadata")
		FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/maven-metadata.xml"), mavenMetadata)

		def metadata = new XmlSlurper().parseText(FileUtils.readFileToString(mavenMetadata))
		def curseToolsVersion = metadata.versioning.release

		def curseTools = new File(cacheFiles, "${curseToolsVersion}.jar")

		logger.lifecycle(":downloading CurseTools")
		FileUtils.copyURLToFile(new URL("http://maven.modmuss50.me/CurseTools/CurseTools/${curseToolsVersion}/CurseTools-${curseToolsVersion}.jar"), curseTools)

		logger.lifecycle(":launching CurseTools")
		ant.java(jar: curseTools.getAbsolutePath(), fork: true, spawn: false) {
			arg(value: jar.archivePath.getAbsolutePath())
		}
	}
}